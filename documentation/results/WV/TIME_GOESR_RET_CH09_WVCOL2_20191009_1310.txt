Timer unit: 1e-06 s

Total time: 5044.35 s
File: <ipython-input-17-e44f28582826>
Function: main at line 1

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     1                                           def main():
     2         1          4.0      4.0      0.0      images = []
     3         1          2.0      2.0      0.0      historic = []
     4         1          1.0      1.0      0.0      results = []
     5                                               
     6         2        682.0    341.0      0.0      for img in os.listdir(data_png):
     7         1          3.0      3.0      0.0          try:
     8                                                       # Normalização das imagens   
     9         1    2331472.0 2331472.0      0.0              img_train = mpimg.imread((os.path.join(data_png, img)))  
    10         1      67114.0  67114.0      0.0              max_train_value = float(img_train.max())
    11         1     185773.0 185773.0      0.0              train = img_train.astype('float32') / max_train_value
    12         1        123.0    123.0      0.0              train = train.reshape((len(train), np.prod(train.shape[1:])))
    13                                                       
    14         1    2291096.0 2291096.0      0.0              img_test = mpimg.imread((os.path.join(data_png, img)))
    15         1      57776.0  57776.0      0.0              max_test_value = float(img_test.max())
    16         1     281255.0 281255.0      0.0              test = img_test.astype('float32') / max_test_value
    17         1        122.0    122.0      0.0              test = test.reshape((len(test), np.prod(test.shape[1:])))
    18                                           
    19                                                       # Envio da imagem para a classe DeepAutoencoder
    20         1     535925.0 535925.0      0.0              autoencoder = DeepAutoencoder(train.shape[1], 64)
    21         1 4995189844.0 4995189844.0     99.0              autoencoder.train(train, test, 64, 1500)
    22                                                       
    23         1     691598.0 691598.0      0.0              encoded_img = autoencoder.get_encoded_image(test)
    24         1     727667.0 727667.0      0.0              decoded_img = autoencoder.get_decoded_image(encoded_img)
    25                                           
    26         1          7.0      7.0      0.0              autoencoder_history = autoencoder.get_history_model()
    27         1    1372654.0 1372654.0      0.0              autoencoder_evaluate = autoencoder.get_evaluate_model(train, test)
    28                                                       
    29         1    1488655.0 1488655.0      0.0              autoencoder.save_model(img)
    30         1     120663.0 120663.0      0.0              autoencoder.save_model_to_yml(img)
    31                                                       
    32         1     977001.0 977001.0      0.0              plot_metrics_history(autoencoder_history, 'autoencoder' + img)
    33         1     287433.0 287433.0      0.0              plot_metrics_history_subplot(autoencoder_history, 'autoencoder' + img)
    34         1     259372.0 259372.0      0.0              plot_metrics_evaluate(autoencoder_evaluate, 'autoencoder' + img)
    35         1    1351250.0 1351250.0      0.0              plot_metrics_evaluate_all(autoencoder_evaluate, 'autoencoder' + img)
    36                                           
    37                                                       # Dimensões da imagem original
    38         1          3.0      3.0      0.0              image_shape = img_test.shape
    39         1          1.0      1.0      0.0              size_image = img_test.size
    40                                           
    41                                                       # Redimensionamento das imagens obtidas
    42         1          4.0      4.0      0.0              original_result = test.reshape(image_shape[0], image_shape[1], image_shape[2])
    43         1          2.0      2.0      0.0              decoded_img_result = decoded_img.reshape(image_shape[0], image_shape[1], image_shape[2])      
    44                                           
    45         1          1.0      1.0      0.0              images.append(original_result)
    46         1          1.0      1.0      0.0              images.append(encoded_img)
    47         1          1.0      1.0      0.0              images.append(decoded_img_result)
    48                                           
    49         1    8067757.0 8067757.0      0.2              save_image('original_' + img, original_result)
    50         1      87732.0  87732.0      0.0              save_image('encoded_' + img, encoded_img)
    51         1   21092499.0 21092499.0      0.4              save_image('decoded_' + img, decoded_img_result)
    52                                                       
    53         1       2292.0   2292.0      0.0              save_npy(img, encoded_img)
    54         1        301.0    301.0      0.0              save_json(img, image_shape, size_image)
    55                                                       
    56                                                       #Print average of the time for each layer
    57         1        240.0    240.0      0.0              results.append(np.average(time_callback.times))
    58         1         98.0     98.0      0.0              seconds = np.average(time_callback.times)
    59         1         53.0     53.0      0.0              result_time = str(datetime.timedelta(seconds=seconds))
    60         1        550.0    550.0      0.0              print("Medium time:", result_time) 
    61                                           
    62                                                   except Exception as e:
    63                                                       print(e)
    64                                                       pass
    65                                           
    66         1    6878731.0 6878731.0      0.1      plot_all(images)
    67         1          2.0      2.0      0.0      return